// Code generated by counterfeiter. DO NOT EDIT.
package pkgfakes

import (
	"sync"

	"github.com/garethjevans/create-pr/pkg"
)

type FakeGitHub struct {
	DefaultBranchStub        func(string, string, string) (string, error)
	defaultBranchMutex       sync.RWMutex
	defaultBranchArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	defaultBranchReturns struct {
		result1 string
		result2 error
	}
	defaultBranchReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PullRequestForBranchStub        func(string, string, string, string) (bool, error)
	pullRequestForBranchMutex       sync.RWMutex
	pullRequestForBranchArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	pullRequestForBranchReturns struct {
		result1 bool
		result2 error
	}
	pullRequestForBranchReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitHub) DefaultBranch(arg1 string, arg2 string, arg3 string) (string, error) {
	fake.defaultBranchMutex.Lock()
	ret, specificReturn := fake.defaultBranchReturnsOnCall[len(fake.defaultBranchArgsForCall)]
	fake.defaultBranchArgsForCall = append(fake.defaultBranchArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DefaultBranchStub
	fakeReturns := fake.defaultBranchReturns
	fake.recordInvocation("DefaultBranch", []interface{}{arg1, arg2, arg3})
	fake.defaultBranchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitHub) DefaultBranchCallCount() int {
	fake.defaultBranchMutex.RLock()
	defer fake.defaultBranchMutex.RUnlock()
	return len(fake.defaultBranchArgsForCall)
}

func (fake *FakeGitHub) DefaultBranchCalls(stub func(string, string, string) (string, error)) {
	fake.defaultBranchMutex.Lock()
	defer fake.defaultBranchMutex.Unlock()
	fake.DefaultBranchStub = stub
}

func (fake *FakeGitHub) DefaultBranchArgsForCall(i int) (string, string, string) {
	fake.defaultBranchMutex.RLock()
	defer fake.defaultBranchMutex.RUnlock()
	argsForCall := fake.defaultBranchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGitHub) DefaultBranchReturns(result1 string, result2 error) {
	fake.defaultBranchMutex.Lock()
	defer fake.defaultBranchMutex.Unlock()
	fake.DefaultBranchStub = nil
	fake.defaultBranchReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) DefaultBranchReturnsOnCall(i int, result1 string, result2 error) {
	fake.defaultBranchMutex.Lock()
	defer fake.defaultBranchMutex.Unlock()
	fake.DefaultBranchStub = nil
	if fake.defaultBranchReturnsOnCall == nil {
		fake.defaultBranchReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.defaultBranchReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) PullRequestForBranch(arg1 string, arg2 string, arg3 string, arg4 string) (bool, error) {
	fake.pullRequestForBranchMutex.Lock()
	ret, specificReturn := fake.pullRequestForBranchReturnsOnCall[len(fake.pullRequestForBranchArgsForCall)]
	fake.pullRequestForBranchArgsForCall = append(fake.pullRequestForBranchArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.PullRequestForBranchStub
	fakeReturns := fake.pullRequestForBranchReturns
	fake.recordInvocation("PullRequestForBranch", []interface{}{arg1, arg2, arg3, arg4})
	fake.pullRequestForBranchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitHub) PullRequestForBranchCallCount() int {
	fake.pullRequestForBranchMutex.RLock()
	defer fake.pullRequestForBranchMutex.RUnlock()
	return len(fake.pullRequestForBranchArgsForCall)
}

func (fake *FakeGitHub) PullRequestForBranchCalls(stub func(string, string, string, string) (bool, error)) {
	fake.pullRequestForBranchMutex.Lock()
	defer fake.pullRequestForBranchMutex.Unlock()
	fake.PullRequestForBranchStub = stub
}

func (fake *FakeGitHub) PullRequestForBranchArgsForCall(i int) (string, string, string, string) {
	fake.pullRequestForBranchMutex.RLock()
	defer fake.pullRequestForBranchMutex.RUnlock()
	argsForCall := fake.pullRequestForBranchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGitHub) PullRequestForBranchReturns(result1 bool, result2 error) {
	fake.pullRequestForBranchMutex.Lock()
	defer fake.pullRequestForBranchMutex.Unlock()
	fake.PullRequestForBranchStub = nil
	fake.pullRequestForBranchReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) PullRequestForBranchReturnsOnCall(i int, result1 bool, result2 error) {
	fake.pullRequestForBranchMutex.Lock()
	defer fake.pullRequestForBranchMutex.Unlock()
	fake.PullRequestForBranchStub = nil
	if fake.pullRequestForBranchReturnsOnCall == nil {
		fake.pullRequestForBranchReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.pullRequestForBranchReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGitHub) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.defaultBranchMutex.RLock()
	defer fake.defaultBranchMutex.RUnlock()
	fake.pullRequestForBranchMutex.RLock()
	defer fake.pullRequestForBranchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitHub) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.GitHub = new(FakeGitHub)
